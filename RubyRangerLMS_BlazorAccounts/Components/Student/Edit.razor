@page "/edit-student/{StudentId:guid}"
@rendermode InteractiveServer
@inject IService<Student> StudentService
@inject NavigationManager NavigationManager

<h3>Edit Student</h3>

@if (student == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="student" OnValidSubmit="HandleValidSubmit" FormName="EditStudentForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="fullName">Full Name</label>
            <InputText id="fullName" class="form-control" @bind-Value="student.FullName" />
        </div>
        <div class="form-group">
            <label for="email">Email</label>
            <InputText id="email" class="form-control" @bind-Value="student.Email" />
        </div>
        <div class="form-group">
            <label for="phoneNumber">Phone Number</label>
            <InputText id="phoneNumber" class="form-control" @bind-Value="student.PhoneNumber" />
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    </EditForm>
}

@code {
    [Parameter]
    public Guid StudentId { get; set; }

    private Student? student { get; set; }

    protected override async Task OnInitializedAsync()
    {
        student = await StudentService.GetByIdAsync(StudentId);
    }

    private void HandleValidSubmit()
    {
        StudentService.UpdateAsync(student);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
}
